package com.smartbill360.model;

import jakarta.validation.constraints.AssertTrue;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;


import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
public class ClientRegModel {

	@NotBlank(message="GST number can not be blank")
	@Size(min = 15 , max = 15 , message = "GST number must be of 15 characters long")
	@Pattern(
		    regexp = "^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$",
		    message = "Invalid GST number format"
		)
	private String gstin;
	
	@NotBlank(message = "Firm Name cannot be blank")
	private String name;
	
	@Min(1)
	@Max(37)
	private Integer stateCode;
	
	@Email(message="Email is not in proper format")
	@NotBlank(message = "Email can not be blank")
	private String email;
	
	@NotNull(message = "Is Regular can not be blank")
	private Boolean isRegular;
	
	@Pattern(regexp = "^[0-9]{10}$", message = "Contact must be a 10-digit number")
	private String contact;
	
	private String address;
	
	@AssertTrue(message = "GSTIN must be provided if client is regular")
    public boolean isValidGstinForRegularClient() {
        return !Boolean.TRUE.equals(isRegular) || (gstin != null && !gstin.isBlank());
    }

	public ClientRegModel(
			@NotBlank(message = "GST number can not be blank") @Size(min = 15, max = 15, message = "GST number must be of 15 characters long") @Pattern(regexp = "^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$", message = "Invalid GST number format") String gstin,
			@NotBlank(message = "Firm Name cannot be blank") String name, @Min(1) @Max(37) Integer stateCode,
			@Email(message = "Email is not in proper format") @NotBlank(message = "Email can not be blank") String email,
			@NotNull(message = "Is Regular can not be blank") Boolean isRegular, 	@Pattern(regexp = "^[0-9]{10}$", message = "Contact must be a 10-digit number") String contact, String address) {
		super();
		this.gstin = gstin.toUpperCase();
		this.name = name;
		this.stateCode = stateCode;
		this.email = email;
		this.isRegular = isRegular;
		this.contact = contact;
		this.address = address;
	}
	
	
	
}
