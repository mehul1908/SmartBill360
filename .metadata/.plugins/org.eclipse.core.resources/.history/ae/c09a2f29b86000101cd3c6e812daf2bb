package com.smartbill360.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.smartbill360.entity.Consignee;
import com.smartbill360.entity.Role;
import com.smartbill360.entity.User;
import com.smartbill360.exception.GSTAlreadyExistedException;
import com.smartbill360.exception.UserAlreadyCreatedException;
import com.smartbill360.model.ConsigneeRegModel;
import com.smartbill360.model.LoginModel;
import com.smartbill360.model.RegisterModel;
import com.smartbill360.repo.ConsigneeRepo;
import com.smartbill360.repo.UserRepo;

import jakarta.validation.Valid;

@Service
public class UserService implements UserDetailsService {

	@Autowired
	private UserRepo userRepo;

	@Autowired
	private ConsigneeRepo consigneeRepo;

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		// TODO Auto-generated method stub
		Optional<User> userOp = this.getByEmail(username);
		if (userOp.isPresent())
			return userOp.get();
		throw new UsernameNotFoundException("Invalid Email Id");
	}

	public Optional<User> getByEmail(String username) {
		return userRepo.findById(username);
	}

	public User saveUser(@Valid RegisterModel model) throws UserAlreadyCreatedException {
		Optional<User> userOp = this.getByEmail(model.getEmail());
		if (userOp.isPresent()) {
			String message = "User with email id " + model.getEmail() + " is already created";
			throw new UserAlreadyCreatedException(message);
		}
		try {
			User user = new User(model.getEmail(), model.getPassword(), model.getRole(), model.getName());
			userRepo.save(user);
			return user;
		} catch (Exception ex) {
			throw ex;
		}

	}

	public User loginUser(@Valid LoginModel model) {

		Optional<User> userOp = userRepo.findByEmailAndIsActiveTrue(model.getEmail());

		if (userOp.isEmpty())
			throw new UsernameNotFoundException("Invalid Email Id");
		else {
			return userOp.get();
		}
	}

	public Consignee createConsignee(@Valid ConsigneeRegModel model) throws GSTAlreadyExistedException {
		
		Optional<Consignee> consigneeOp = consigneeRepo.findByGstin(model.getGstin());
		if(consigneeOp.isEmpty()) {
			Consignee consignee = new Consignee(model.getGstin(), model.getName(), model.getStateCode(), model.getEmail(),
					model.getContact(), model.getAddress(), model.getIsRegular());
			consigneeRepo.save(consignee);
			return consignee;
		}
		throw new GSTAlreadyExistedException(model.getGstin());

	}

	public List<Consignee> getAllConsignee() {
		List<Consignee> consignees = consigneeRepo.findAll();
		return consignees;
	}

	public Consignee getClientByGST(String gst) {
		Optional<Consignee> consigneeOp = consigneeRepo.findByGstin(gst);
		if(consigneeOp.isEmpty()) return null;
		
		return consigneeOp.get();
	}

	public Consignee getClientById(Integer id) {
		Optional<Consignee> consigneeOp = consigneeRepo.findById(id);
		if(consigneeOp.isEmpty()) return null;
		
		return consigneeOp.get();
	}

	public List<Consignee> searchConsigneeByNameSubstring(String keyword) {
		List<Consignee> consignees = consigneeRepo.findByNameContainingIgnoreCase(keyword);
		return consignees;
	}

	public User getUserByEmailAndRole(String email, Role roleClient) {
		Optional<User> userOp = userRepo.findByEmailAndRole(email , roleClient);
		if(userOp.isEmpty()) return null;
		
		return userOp.get();
	}

}
