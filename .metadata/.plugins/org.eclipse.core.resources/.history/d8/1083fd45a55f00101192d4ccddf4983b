package com.smartbill360.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.smartbill360.entity.Client;
import com.smartbill360.entity.User;
import com.smartbill360.exception.GSTAlreadyExistedException;
import com.smartbill360.exception.UserAlreadyCreatedException;
import com.smartbill360.model.ClientRegModel;
import com.smartbill360.model.LoginModel;
import com.smartbill360.model.RegisterModel;
import com.smartbill360.repo.ClientRepo;
import com.smartbill360.repo.UserRepo;

import jakarta.validation.Valid;

@Service
public class UserService implements UserDetailsService {

	@Autowired
	private UserRepo userRepo;

	@Autowired
	private ClientRepo clientRepo;

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		// TODO Auto-generated method stub
		Optional<User> userOp = this.getByEmail(username);
		if (userOp.isPresent())
			return userOp.get();
		throw new UsernameNotFoundException("Invalid Email Id");
	}

	public Optional<User> getByEmail(String username) {
		return userRepo.findById(username);
	}

	public User saveUser(@Valid RegisterModel model) throws UserAlreadyCreatedException {
		Optional<User> userOp = this.getByEmail(model.getEmail());
		if (userOp.isPresent()) {
			String message = "User with email id " + model.getEmail() + " is already created";
			throw new UserAlreadyCreatedException(message);
		}
		try {
			User user = new User(model.getEmail(), model.getPassword(), model.getRole(), model.getName());
			userRepo.save(user);
			return user;
		} catch (Exception ex) {
			throw ex;
		}

	}

	public User loginUser(@Valid LoginModel model) {

		Optional<User> userOp = userRepo.findByEmailAndIsActiveTrue(model.getEmail());

		if (userOp.isEmpty())
			throw new UsernameNotFoundException("Invalid Email Id");
		else {
			return userOp.get();
		}
	}

	public Client createClient(@Valid ClientRegModel model) throws GSTAlreadyExistedException {
		
		Optional<Client> clientOp = clientRepo.findByGstin(model.getGstin());
		if(clientOp.isEmpty()) {
			Client client = new Client(model.getGstin(), model.getName(), model.getStateCode(), model.getEmail(),
					model.getContact(), model.getAddress(), model.getIsRegular());
			clientRepo.save(client);
			return client;
		}
		throw new GSTAlreadyExistedException(model.getGstin());

	}

	public List<Client> getAllClient() {
		List<Client> clients = clientRepo.findAll();
		return clients;
	}

	public Client getClientByGST(String gst) {
		Optional<Client> clientOp = clientRepo.findByGstin(gst);
		if(clientOp.isEmpty()) return null;
		
		return clientOp.get();
	}

}
